// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Importing this resource is not supported.
type ProjectResources struct {
	pulumi.CustomResourceState

	// the ID of the project
	Project pulumi.StringOutput `pulumi:"project"`
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources pulumi.StringArrayOutput `pulumi:"resources"`
}

// NewProjectResources registers a new resource with the given unique name, arguments, and options.
func NewProjectResources(ctx *pulumi.Context,
	name string, args *ProjectResourcesArgs, opts ...pulumi.ResourceOption) (*ProjectResources, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Resources == nil {
		return nil, errors.New("missing required argument 'Resources'")
	}
	if args == nil {
		args = &ProjectResourcesArgs{}
	}
	var resource ProjectResources
	err := ctx.RegisterResource("digitalocean:index/projectResources:ProjectResources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectResources gets an existing ProjectResources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectResources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectResourcesState, opts ...pulumi.ResourceOption) (*ProjectResources, error) {
	var resource ProjectResources
	err := ctx.ReadResource("digitalocean:index/projectResources:ProjectResources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectResources resources.
type projectResourcesState struct {
	// the ID of the project
	Project *string `pulumi:"project"`
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources []string `pulumi:"resources"`
}

type ProjectResourcesState struct {
	// the ID of the project
	Project pulumi.StringPtrInput
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources pulumi.StringArrayInput
}

func (ProjectResourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectResourcesState)(nil)).Elem()
}

type projectResourcesArgs struct {
	// the ID of the project
	Project string `pulumi:"project"`
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources []string `pulumi:"resources"`
}

// The set of arguments for constructing a ProjectResources resource.
type ProjectResourcesArgs struct {
	// the ID of the project
	Project pulumi.StringInput
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources pulumi.StringArrayInput
}

func (ProjectResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectResourcesArgs)(nil)).Elem()
}

type ProjectResourcesInput interface {
	pulumi.Input

	ToProjectResourcesOutput() ProjectResourcesOutput
	ToProjectResourcesOutputWithContext(ctx context.Context) ProjectResourcesOutput
}

func (ProjectResources) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectResources)(nil)).Elem()
}

func (i ProjectResources) ToProjectResourcesOutput() ProjectResourcesOutput {
	return i.ToProjectResourcesOutputWithContext(context.Background())
}

func (i ProjectResources) ToProjectResourcesOutputWithContext(ctx context.Context) ProjectResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectResourcesOutput)
}

type ProjectResourcesOutput struct {
	*pulumi.OutputState
}

func (ProjectResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectResourcesOutput)(nil)).Elem()
}

func (o ProjectResourcesOutput) ToProjectResourcesOutput() ProjectResourcesOutput {
	return o
}

func (o ProjectResourcesOutput) ToProjectResourcesOutputWithContext(ctx context.Context) ProjectResourcesOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProjectResourcesOutput{})
}

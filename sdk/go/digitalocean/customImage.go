// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a resource which can be used to create a custom Image from a URL
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-digitalocean/sdk/v3/go/digitalocean"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := digitalocean.NewCustomImage(ctx, "flatcar", &digitalocean.CustomImageArgs{
// 			Regions: pulumi.StringArray{
// 				pulumi.String("nyc3"),
// 			},
// 			Url: pulumi.String("https://stable.release.flatcar-linux.net/amd64-usr/2605.7.0/flatcar_production_digitalocean_image.bin.bz2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type CustomImage struct {
	pulumi.CustomResourceState

	CreatedAt    pulumi.StringOutput    `pulumi:"createdAt"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	Distribution pulumi.StringPtrOutput `pulumi:"distribution"`
	ImageId      pulumi.IntOutput       `pulumi:"imageId"`
	MinDiskSize  pulumi.IntOutput       `pulumi:"minDiskSize"`
	// A name for the Custom Image.
	Name   pulumi.StringOutput `pulumi:"name"`
	Public pulumi.BoolOutput   `pulumi:"public"`
	// A list of regions. (Currently only one is supported)
	Regions       pulumi.StringArrayOutput `pulumi:"regions"`
	SizeGigabytes pulumi.Float64Output     `pulumi:"sizeGigabytes"`
	Slug          pulumi.StringOutput      `pulumi:"slug"`
	Status        pulumi.StringOutput      `pulumi:"status"`
	Tags          pulumi.StringArrayOutput `pulumi:"tags"`
	Type          pulumi.StringOutput      `pulumi:"type"`
	// A URL from which the custom Linux virtual machine image may be retrieved.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewCustomImage registers a new resource with the given unique name, arguments, and options.
func NewCustomImage(ctx *pulumi.Context,
	name string, args *CustomImageArgs, opts ...pulumi.ResourceOption) (*CustomImage, error) {
	if args == nil || args.Regions == nil {
		return nil, errors.New("missing required argument 'Regions'")
	}
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	if args == nil {
		args = &CustomImageArgs{}
	}
	var resource CustomImage
	err := ctx.RegisterResource("digitalocean:index/customImage:CustomImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomImage gets an existing CustomImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomImageState, opts ...pulumi.ResourceOption) (*CustomImage, error) {
	var resource CustomImage
	err := ctx.ReadResource("digitalocean:index/customImage:CustomImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomImage resources.
type customImageState struct {
	CreatedAt    *string `pulumi:"createdAt"`
	Description  *string `pulumi:"description"`
	Distribution *string `pulumi:"distribution"`
	ImageId      *int    `pulumi:"imageId"`
	MinDiskSize  *int    `pulumi:"minDiskSize"`
	// A name for the Custom Image.
	Name   *string `pulumi:"name"`
	Public *bool   `pulumi:"public"`
	// A list of regions. (Currently only one is supported)
	Regions       []string `pulumi:"regions"`
	SizeGigabytes *float64 `pulumi:"sizeGigabytes"`
	Slug          *string  `pulumi:"slug"`
	Status        *string  `pulumi:"status"`
	Tags          []string `pulumi:"tags"`
	Type          *string  `pulumi:"type"`
	// A URL from which the custom Linux virtual machine image may be retrieved.
	Url *string `pulumi:"url"`
}

type CustomImageState struct {
	CreatedAt    pulumi.StringPtrInput
	Description  pulumi.StringPtrInput
	Distribution pulumi.StringPtrInput
	ImageId      pulumi.IntPtrInput
	MinDiskSize  pulumi.IntPtrInput
	// A name for the Custom Image.
	Name   pulumi.StringPtrInput
	Public pulumi.BoolPtrInput
	// A list of regions. (Currently only one is supported)
	Regions       pulumi.StringArrayInput
	SizeGigabytes pulumi.Float64PtrInput
	Slug          pulumi.StringPtrInput
	Status        pulumi.StringPtrInput
	Tags          pulumi.StringArrayInput
	Type          pulumi.StringPtrInput
	// A URL from which the custom Linux virtual machine image may be retrieved.
	Url pulumi.StringPtrInput
}

func (CustomImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*customImageState)(nil)).Elem()
}

type customImageArgs struct {
	Description  *string `pulumi:"description"`
	Distribution *string `pulumi:"distribution"`
	// A name for the Custom Image.
	Name *string `pulumi:"name"`
	// A list of regions. (Currently only one is supported)
	Regions []string `pulumi:"regions"`
	Tags    []string `pulumi:"tags"`
	// A URL from which the custom Linux virtual machine image may be retrieved.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a CustomImage resource.
type CustomImageArgs struct {
	Description  pulumi.StringPtrInput
	Distribution pulumi.StringPtrInput
	// A name for the Custom Image.
	Name pulumi.StringPtrInput
	// A list of regions. (Currently only one is supported)
	Regions pulumi.StringArrayInput
	Tags    pulumi.StringArrayInput
	// A URL from which the custom Linux virtual machine image may be retrieved.
	Url pulumi.StringInput
}

func (CustomImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customImageArgs)(nil)).Elem()
}

type CustomImageInput interface {
	pulumi.Input

	ToCustomImageOutput() CustomImageOutput
	ToCustomImageOutputWithContext(ctx context.Context) CustomImageOutput
}

func (CustomImage) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomImage)(nil)).Elem()
}

func (i CustomImage) ToCustomImageOutput() CustomImageOutput {
	return i.ToCustomImageOutputWithContext(context.Background())
}

func (i CustomImage) ToCustomImageOutputWithContext(ctx context.Context) CustomImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomImageOutput)
}

type CustomImageOutput struct {
	*pulumi.OutputState
}

func (CustomImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomImageOutput)(nil)).Elem()
}

func (o CustomImageOutput) ToCustomImageOutput() CustomImageOutput {
	return o
}

func (o CustomImageOutput) ToCustomImageOutputWithContext(ctx context.Context) CustomImageOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CustomImageOutput{})
}
